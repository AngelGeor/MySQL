2. Insert
INSERT INTO `coaches` (`first_name`, `last_name`, `salary`, `coach_level`)
 
(SELECT  p.`first_name`,
 p.`last_name`,
 p.`salary` * 2 as salary,
 char_length(p.first_name) as coach_level
 FROM `players` as p
 WHERE p.age >= 45);

3.	Update

 UPDATE coaches AS c
LEFT JOIN players_coaches AS pc
ON c.id = pc.coach_id
SET c.coach_level = c.coach_level + 1
WHERE `first_name` LIKE 'A%'                   # left(first_name, 1) = 'A'
 AND
 pc.player_id IS NOT NULL;  // WHERE c.`first_name` LIKE ("A%") AND c.id IN (SELECT coach_id FROM `players_coaches`);

4. DELETE
DELETE FROM players
WHERE age >= 45;

5. Players

SELECT `first_name`, `age`, `salary` FROM `players`
ORDER BY `salary` DESC;

06. Young offense players without contract

SELECT p.`id`, CONCAT(`first_name`, ' ', `last_name`) as `full_name`,
p.`age`,
 p.`position`,
p. `hire_date`
 FROM `players` as p
 JOIN `skills_data` as sd 
 ON p.`skills_data_id` = sd.`id`
WHERE p.`age` < 23 AND p.`position` = 'A' AND p.`hire_date` IS NULL AND sd.`strength` > 50
ORDER BY p.`salary` , p.`age`;

7.Detail info for all teams

SELECT t.`name` as team_name,
t.`established`,
t.`fan_base`,
COUNT(p.id) as players_count
 FROM `teams` as t
LEFT JOIN `players` as p ON t.id = p.team_id
GROUP BY t.id
ORDER BY players_count DESC , t.fan_base DESC;

8.

SELECT max(sd.speed) AS max_speed, t.`name`
FROM players AS p
	RIGHT JOIN skills_data AS sd
    	ON p.skills_data_id = sd.id
    	RIGHT JOIN teams AS te
    	ON p.team_id = te.id
    	RIGHT JOIN stadiums AS s
    	ON te.stadium_id = s.id
    	RIGHT JOIN towns AS t
    	ON s.town_id = t.id
WHERE te.`name` NOT LIKE 'Devify'
GROUP BY t.`name`
ORDER BY max_speed DESC, t.`name`;

9.
SELECT c.`name`, 
count(p.id) as `total_count_of_players`,
sum(p.`salary`)
FROM countries as c
LEFT JOIN towns as tw on c.id = tw.country_id
LEFT JOIN 
stadiums as s ON s.town_id = tw.id
LEFT JOIN teams as t On t.stadium_id = s.id
LEFT JOIN players AS p on p.team_id = t.id
GROUP BY c.id
ORDER BY total_count_of_players DESC, c.name; 

10.
DELIMITER %%

CREATE FUNCTION udf_stadium_players_count (stadium_name VARCHAR(30))
RETURNS INT
DETERMINISTIC
BEGIN
DECLARE count INT;

SET count := (SELECT COUNT(p.id) FROM players as p
 LEFT JOIN `teams` as t ON t.id = p.team_id  
 LEFT JOIN `stadiums` as s on s.id = t.stadium_id
 WHERE s.`name` = stadium_name);
 
 RETURN count;

END %%

11.
CREATE PROCEDURE udp_find_playmaker(min_dribble_points INT , team_name VARCHAR(45))
BEGIN
	SELECT CONCAT(p.`first_name`, ' ', p.`last_name`) as full_name,
    p.`age`,
    p.`salary`,
    sk.`dribbling`,
    sk.`speed`,
    t.`name` as team_name
    FROM `players` as p
    JOIN `skills_data` as sk on p.skills_data_id = sk.id
    JOIN `teams` as t ON t.id = p.team_id
    WHERE sk.dribbling > min_dribble_points AND
    t.`name` = team_name AND
    sk.speed > (SELECT AVG(`speed`) FROM `skills_data`)
    ORDER BY sk.speed DESC
    LIMIT 1;
    
END